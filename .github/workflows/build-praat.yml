name: Building Praat!

on:
  push:
  pull_request:
  workflow_call:

jobs:
  BuildLinux:
    strategy:
      matrix:
        include:
          - version: clang
            targetos: linux
            makefile: makefile.defs.linux.pulse-clang
            binary: praat
    name: "Build: ${{ matrix.targetos }} ${{ matrix.version }}"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get install -y libgtk-3-dev libasound2-dev libpulse-dev libjack-dev

      - name: Build Praat (${{ matrix.targetos }})
        run: |
          # Copy right makefile
          cp makefiles/${{ matrix.makefile }} makefile.defs

          # Make it
          make -j$(nproc)

          # Copy binary output with platform and version specific naming
          cp ${{ matrix.binary }} Praat-${{ matrix.targetos }}_${{ matrix.version }}

      - name: Upload binary artifact (Praat-${{ matrix.targetos }}_${{ matrix.version }})
        uses: actions/upload-artifact@v4
        with:
          name: Praat-${{ matrix.targetos }}_${{ matrix.version }}
          path: Praat-${{ matrix.targetos }}_${{ matrix.version }}

  BuildWindows:
    strategy:
      matrix:
        include:
          - version: clang-aarch64
            targetos: windows
            runner: windows-11-arm
            msystem: CLANGARM64
            makefile: makefile.defs.msys-clang
            binary: Praat.exe
            extension: .exe
          - version: clang-x86_64
            targetos: windows
            runner: windows-2022
            msystem: CLANG64
            makefile: makefile.defs.msys-clang
            binary: Praat.exe
            extension: .exe
          - version: i686
            targetos: windows
            runner: windows-2022
            msystem: MINGW32
            makefile: makefile.defs.msys-mingw32
            binary: Praat.exe
            extension: .exe
    name: "Build: ${{ matrix.targetos }} ${{ matrix.version }}"
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4

      - name: Set up MSYS2 ${{ matrix.msystem }} and install dependencies
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          install: >-
            base-devel
            mingw-w64-${{ matrix.version }}-toolchain
            mingw-w64-${{ matrix.version }}-clang
            make

      - name: Build Praat (${{ matrix.version }})
        run: |
          # Copy right makefile
          cp makefiles/${{ matrix.makefile }} makefile.defs

          # Make it
          make -j$(nproc) \
            PREFIX="/${{ matrix.msystem }}/bin/"

          # Copy binary output with platform and version specific naming
          cp ${{ matrix.binary }} Praat-${{ matrix.targetos }}_${{ matrix.version }}${{ matrix.extension }}

      - name: Upload binary artifact (Praat-${{ matrix.targetos }}_${{ matrix.version }}${{ matrix.extension }})
        uses: actions/upload-artifact@v4
        with:
          name: Praat-${{ matrix.targetos }}_${{ matrix.version }}
          path: Praat-${{ matrix.targetos }}_${{ matrix.version }}${{ matrix.extension }}

  BuildMacOS:
    name: "Build: ${{ matrix.targetos }} ${{ matrix.version }}"
    strategy:
      matrix:
        include:
          - runner: macos-13
            targetos: "macOS13"
            version: Ventura
            extension: .dmg
            latest_tag: "v6.4.34"
            latest_zip: "praat6434_xcodeproj.zip"
          - runner: macos-15
            targetos: "macOS15"
            version: Sequoia-arm64
            extension: .dmg
            latest_tag: "v6.4.34"
            latest_zip: "praat6434_xcodeproj.zip"
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract praat xcodeproj from latest release
        run: |
          curl -LO https://github.com/praat/praat/releases/download/${{ matrix.latest_tag }}/${{ matrix.latest_zip }}
          unzip ${{ matrix.latest_zip }} -d .

      - name: Set up Xcode version
        run: |
          if [[ "${{ matrix.runner }}" == "macos-13" ]]; then
            sudo xcode-select -s /Applications/Xcode_15.2.app
          elif [[ "${{ matrix.runner }}" == "macos-15" ]]; then
            sudo xcode-select -s /Applications/Xcode_16.3.app
          fi

      - name: Build Praat with xcodebuild
        run: |
          xcodebuild \
            -project praat.xcodeproj \
            -scheme praat_mac \
            -configuration Release \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            SYMROOT=build

      - name: Create DMG with Praat app
        run: |
          hdiutil create -fs HFS+ -ov -srcfolder build/Configuration64/Praat.app -volname Praat_${{ matrix.runner }}_${{ matrix.version }} praat_app.dmg
          hdiutil convert -ov -format UDZO -o Praat-${{ matrix.targetos }}_${{ matrix.version }}${{ matrix.extension }} praat_app.dmg

      - name: Upload binary (Praat-${{ matrix.targetos }}_${{ matrix.version }}${{ matrix.extension }})
        uses: actions/upload-artifact@v4
        with:
          name: Praat-${{ matrix.targetos }}_${{ matrix.version }}
          path: Praat-${{ matrix.targetos }}_${{ matrix.version }}${{ matrix.extension }}

  TestLinux:
    name: "Test: Linux"
    runs-on: ubuntu-22.04
    needs: BuildLinux
    strategy:
      matrix:
        version: [clang]
        targetos: [linux]
    steps:
      - name: Ensure consistent line endings
        run: git config --global core.autocrlf input

      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: Praat-${{ matrix.targetos }}_${{ matrix.version }}

      - name: Install dependencies
        run: sudo apt-get install -y libgtk-3-0 libasound2 libpulse0 libjack0

      - name: Apply executable permission
        run: chmod +x ./Praat-${{ matrix.targetos }}_${{ matrix.version }}

      - name: Run Praat tests
        run: ./Praat-${{ matrix.targetos }}_${{ matrix.version }}${{ matrix.extension }} --run test/runAllTests_batch.praat

      - name: Run Praat dwtests
        run: ./Praat-${{ matrix.targetos }}_${{ matrix.version }}${{ matrix.extension }} --run dwtest/runAllTests_batch.praat

  TestWindows:
    name: "Test: Windows"
    needs: BuildWindows
    strategy:
      matrix:
        include:
          - version: clang-aarch64
            targetos: windows
            runner: windows-11-arm
            extension: .exe
          - version: clang-x86_64
            targetos: windows
            runner: windows-2022
            extension: .exe
          - version: i686
            targetos: windows
            runner: windows-2022
            extension: .exe
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Ensure consistent line endings
        run: git config --global core.autocrlf input

      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: Praat-${{ matrix.targetos }}_${{ matrix.version }}

      - name: Run Praat tests
        shell: cmd
        run: |
          .\Praat-${{ matrix.targetos }}_${{ matrix.version }}${{ matrix.extension }} --run test/runAllTests_batch.praat

      - name: Run Praat dwtests
        shell: cmd
        run: |
          .\Praat-${{ matrix.targetos }}_${{ matrix.version }}${{ matrix.extension }} --run dwtest/runAllTests_batch.praat

  TestMacOS:
    name: "Test: macOS"
    needs: BuildMacOS
    strategy:
      matrix:
        include:
          - runner: macos-13
            targetos: "macOS13"
            version: Ventura
            extension: .dmg
          - runner: macos-15
            targetos: "macOS15"
            version: Sequoia-arm64
            extension: .dmg
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Ensure consistent line endings
        run: git config --global core.autocrlf input

      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: Praat-${{ matrix.targetos }}_${{ matrix.version }}

      - name: Apply executable permission
        run: |
          hdiutil attach Praat-${{ matrix.targetos }}_${{ matrix.version }}${{ matrix.extension }} -mountpoint /Volumes/Praat
          cp "/Volumes/Praat/Praat.app/Contents/MacOS/Praat" praat
          chmod +x praat

      - name: Run Praat tests
        run: ./praat --run test/runAllTests_batch.praat

      - name: Run Praat dwtests
        run: ./praat --run dwtest/runAllTests_batch.praat

      - name: Unmount DMG
        if: always()
        run: hdiutil detach /Volumes/Praat
